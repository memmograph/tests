{"version":3,"sources":["Utils/Api.js","components/pages/Discover/index.js","components/pages/About/index.js","components/pages/Search/index.js","components/Navtab.js","App.js","serviceWorker.js","index.js"],"names":["axios","get","Discover","state","image","match","like","componentDidMount","callNewDog","API","then","response","dogImg","data","message","setState","handleClick","choice","randomnum","Math","floor","random","console","log","src","this","onClick","React","Component","About","Search","type","onChange","handleChange","Navtabs","to","App","Navtab","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"8SAEe,EAIH,WACJ,OAAOA,IAAMC,IAAI,4CCgEVC,E,4MAnEXC,MAAQ,CACJC,MAAO,GACPC,MAAO,EACPC,MAAM,G,EAIVC,kBAAoB,WAChB,EAAKC,c,EAITA,WAAa,WACTC,IAAaC,MAAK,SAAAC,GACd,IAAIC,EAASD,EAASE,KAAKC,QAC3B,EAAKC,SAAS,CACVX,MAAOQ,Q,EAOnBI,YAAc,SAACC,GACX,GAAe,SAAXA,EAAmB,CAEnB,IAAIC,EAAYC,KAAKC,MAAsB,EAAhBD,KAAKE,UAChCC,QAAQC,IAAIL,GACM,IAAdA,EACA,EAAKH,SAAS,CACVT,MAAM,EACND,MAAO,EAAKF,MAAME,MAAQ,IAGX,IAAda,GACL,EAAKH,SAAS,CACVT,MAAM,IAGd,EAAKE,kBAKL,EAAKA,c,uDAMH,IAAD,OACL,OACI,6BACI,yDAEA,yBAAKgB,IAAKC,KAAKtB,MAAMC,QACrB,6BACI,4BAAQsB,QAAS,kBAAM,EAAKV,YAAY,UAAxC,YACA,4BAAQU,QAAS,kBAAM,EAAKV,YAAY,aAAxC,eAEHS,KAAKtB,MAAMG,KAAO,kDAA8B,KACjD,4BAAKmB,KAAKtB,MAAME,Y,GA9DTsB,IAAMC,WCKdC,MANf,WACI,OACI,uDCSOC,E,uKATP,OACI,6BACI,uDACA,2BAAOC,KAAK,OAAOC,SAAUP,KAAKQ,oB,GAL7BN,IAAMC,WCYZM,MAXf,WACI,OACI,4BACI,4BAAI,kBAAC,IAAD,CAAMC,GAAG,KAAT,UACJ,4BAAI,kBAAC,IAAD,CAAMA,GAAG,WAAT,WACJ,4BAAI,kBAAC,IAAD,CAAMA,GAAG,aAAT,eCcDC,MAbf,WACE,OACE,kBAAC,IAAD,KACE,6BACE,kBAACC,EAAD,MACA,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWX,IACjC,kBAAC,IAAD,CAAOS,OAAK,EAACC,KAAK,YAAYC,UAAWtC,IACzC,kBAAC,IAAD,CAAOoC,OAAK,EAACC,KAAK,UAAUC,UAAWV,OCJ3BW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASvC,MACvB,2DCZNwC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1C,MAAK,SAAA2C,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLlC,QAAQkC,MAAMA,EAAM1C,c","file":"static/js/main.c31d0759.chunk.js","sourcesContent":["import axios from \"axios\"\r\n\r\nexport default {\r\n    search: function (dog) {\r\n        return axios.get()\r\n    },\r\n    random: function () {\r\n        return axios.get(\"https://dog.ceo/api/breeds/image/random\")\r\n    }\r\n}","import React from \"react\"\r\nimport API from \"../../../Utils/Api\"\r\n\r\nclass Discover extends React.Component {\r\n    state = {\r\n        image: \"\",\r\n        match: 0,\r\n        like: false\r\n    }\r\n\r\n\r\n    componentDidMount = () => {\r\n        this.callNewDog()\r\n    }\r\n\r\n\r\n    callNewDog = () => {\r\n        API.random().then(response => {\r\n            let dogImg = response.data.message\r\n            this.setState({\r\n                image: dogImg\r\n            })\r\n        })\r\n    }\r\n\r\n\r\n\r\n    handleClick = (choice) => {\r\n        if (choice === \"like\") {\r\n\r\n            let randomnum = Math.floor(Math.random() * 5)\r\n            console.log(randomnum)\r\n            if (randomnum === 1) {\r\n                this.setState({\r\n                    like: true,\r\n                    match: this.state.match + 1\r\n                })\r\n            }\r\n            else if (randomnum !== 1) {\r\n                this.setState({\r\n                    like: false,\r\n                })\r\n            }\r\n            this.callNewDog()\r\n\r\n\r\n        }\r\n        else {\r\n            this.callNewDog()\r\n        }\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>This is the Discover page</h1>\r\n\r\n                <img src={this.state.image} />\r\n                <div>\r\n                    <button onClick={() => this.handleClick(\"like\")}>thumb up</button>\r\n                    <button onClick={() => this.handleClick(\"dislike\")}>thumb down</button>\r\n                </div>\r\n                {this.state.like ? <h1>you found a match!</h1> : null}\r\n                <h3>{this.state.match}</h3>\r\n            </div >\r\n        )\r\n    }\r\n}\r\n\r\nexport default Discover","import React from \"react\"\r\n\r\nfunction About() {\r\n    return (\r\n        <h1>This is the About page</h1>\r\n    )\r\n}\r\n\r\nexport default About","import React from \"react\"\r\n\r\nclass Search extends React.Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>This is the search page</h1>\r\n                <input type=\"text\" onChange={this.handleChange} />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Search","import React from \"react\"\r\nimport { Link, useLocation } from \"react-router-dom\";\r\n\r\nfunction Navtabs() {\r\n    return (\r\n        <ul>\r\n            <li><Link to=\"/\">About</Link></li>\r\n            <li><Link to=\"/search\">Search</Link></li>\r\n            <li><Link to=\"/discover\">Discover</Link></li>\r\n\r\n        </ul>\r\n    )\r\n}\r\n\r\nexport default Navtabs;","import React from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport './App.css';\nimport Discover from \"./components/pages/Discover\"\nimport About from \"./components/pages/About\"\nimport Search from \"./components/pages/Search\"\nimport Navtab from \"./components/Navtab\"\n\n\nfunction App() {\n  return (\n    <Router>\n      <div>\n        <Navtab />\n        <Route exact path=\"/\" component={About} />\n        <Route exact path=\"/discover\" component={Discover} />\n        <Route exact path=\"/search\" component={Search} />\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}